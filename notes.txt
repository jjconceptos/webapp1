Locations

cd Projects\Software\publicWebApp

\node_modules\@google-cloud\storage\build\src>code bucket.js

were missing the display projects html
router.replace(router.asPath); 
Git

git add .
git commit -m "multiple images"
git push -u origin main


To initialize the gcloud CLI, run gcloud init:

./google-cloud-sdk/bin/gcloud init



GITHUB ACCESS TOKEN February

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




Hold on 





const handleProjectClick = (project) => {
    if (project) {
      // If a project is provided, set the selected project and toggle the enlarged view
      setSelectedProject(project);
      setEnlargedView(!enlargedView);
      setShowProjectForm(false); // Close the "Add project" form if it's open
    } else {
      // If no project is provided, toggle the "Add project" form
      setShowProjectForm((prevShowProjectForm) => !prevShowProjectForm);
    }
  };















import React, { useState, useEffect, useRef } from 'react';
import Layout from '/layouts/layout';
import Tooltip from '/layouts/tooltip';
import 'layouts/carouselAbout.css';

const About = () => {

  const [tooltipText, setTooltipText] = useState('');
  const [tooltipPosition, setTooltipPosition] = useState({ top: 0, left: 0 });
  const [isTooltipVisible, setTooltipVisibility] = useState(false);

  const handleTooltip = (sentences, event) => {
    const yOffset = 1260;
    const xOffset = 20;
  
    setTooltipText(sentences);
    setTooltipPosition({
      top: event.clientY + yOffset,
      left: event.clientX + xOffset,
    });
    setTooltipVisibility(true);
  };

  const handleTooltipClose = () => {
    setTooltipVisibility(false);
  };

  const handleConocenosClick = () => {
    // Specify the position you want to scroll to (adjust the value as needed)
    const scrollPosition = 750; // Replace with your desired position
    window.scrollTo({
      top: scrollPosition,
      behavior: 'smooth', // Use smooth scrolling
    });
  };
  
  const plans = [
    {
      title: 'Plan A',
      jsx: (
        <>
          <p style={{fontSize:'25px'}}>Plan A</p>
          <p style={{fontSize:'18px'}}>Proyecto visual</p>
          <p style={{fontSize:'13px'}}>- Planta de distribucion</p>
          <p style={{fontSize:'13px'}}>- Imagenes de referencia</p>
          <p style={{fontSize:'13px'}}>- Moodboard</p>
          <p style={{fontSize:'13px'}}>- Renders</p>
          <p style={{fontSize:'13px'}}>- Seleccion de mobiliario e interiores</p>
        </>
      ),
    },
    {
      title: 'Plan B',
      jsx: (
        <>
          <p style={{fontSize:'25px'}}>Plan B</p>
          <p style={{fontSize:'18px'}}>Proyecto mobiliario</p>
          <p
            style={{ fontSize: '13px' }}
            className="tooltip"
            onMouseOver={(e) => handleTooltip('Incluye:\n- Todo lo que incluye Plan A', e)}
            onMouseOut={handleTooltipClose}
          >
            - Proyecto visual
          </p>
         
          <p style={{fontSize:'13px'}}></p>
          <p
            style={{ fontSize: '13px' }}
            className="tooltip"
            onMouseOver={(e) => handleTooltip('Incluye:\n- Seleccion de colores y texturas\n- Seleccion de mobiliario\n- Ambientacion\n- Iluminacion', e)}
            onMouseOut={handleTooltipClose}
          >
            - Decoracion de interiores
          </p>
          <p style={{fontSize:'13px'}}>- Mano de obra</p>
          <p style={{fontSize:'13px'}}>- Flete</p>
          <p style={{fontSize:'13px'}}>- Instalacion</p>
          <p
            style={{ fontSize: '13px' }}
            className="tooltip"
            onMouseOver={(e) => handleTooltip('Supervision a cargo de un arquitecto o ingeniero calificado', e)}
            onMouseOut={handleTooltipClose}
          >
            - Supervision
          </p>
          <p style={{fontSize:'13px'}}>- Entrega final al cliente</p>
          
        </>
      ),
    },
    {
      title: 'Plan C',
      jsx: (
        <>
          <p style={{fontSize:'25px'}}>Plan C</p>
          <p style={{fontSize:'18px'}}>Ejecucion de proyecto</p>
          <p
            style={{ fontSize: '13px' }}
            className="tooltip"
            onMouseOver={(e) => handleTooltip('Incluye:\n- Todo lo que incluye Plan A\n- Se descuenta el precio del proyecto visual!', e)}
            onMouseOut={handleTooltipClose}
          >
            - Proyecto visual
          </p>
          <p
            style={{ fontSize: '13px' }}
            className="tooltip"
            onMouseOver={(e) => handleTooltip('Incluye:\n- Seleccion de colores y texturas\n- Seleccion de mobiliario\n- Ambientacion\n- Iluminacion', e)}
            onMouseOut={handleTooltipClose}
          >
            - Decoracion de interiores
          </p>
          <p
            style={{ fontSize: '13px' }}
            className="tooltip"
            onMouseOver={(e) => handleTooltip('Incluye:\n- Diseno de espacios\n- Colocacion pisos\n- Paredes, tapices y pintura', e)}
            onMouseOut={handleTooltipClose}
          >
            - Diseno de interiores
          </p>
          <p style={{fontSize:'13px'}}>- Mobiliario a la medida</p>
          <p style={{fontSize:'13px'}}>- Mano de obra</p>
          <p style={{fontSize:'13px'}}>- Flete</p>
          <p style={{fontSize:'13px'}}>- Instalacion</p>
          <p
            style={{ fontSize: '13px' }}
            className="tooltip"
            onMouseOver={(e) => handleTooltip('Supervision a cargo de un arquitecto o ingeniero calificado', e)}
            onMouseOut={handleTooltipClose}
          >
            - Supervision
          </p>
          <p style={{fontSize:'13px'}}>- Entrega final al cliente</p>
          
        </>
      ),
    },
  ];

  const yourCarouselItems1 = [

    {
      imagePath: '/61.jpeg',
      text: '',
      
    },

    {
      imagePath: '/7a.jpg',
      text: '',
      
    },
 {
      imagePath: '/90.jpeg',
      text: '',
      
    },
    {
      imagePath: '/91.jpeg',
      text: '',
      
    },
    {
      imagePath: '/63.jpeg',
      text: '',
      
    },

    {
      imagePath: '/93.jpeg',
      text: '',
      
    },
    
    {
      imagePath: '/12a.jpg',
      text: '',
      
    },
    {
      imagePath: '/64.jpeg',
      text: '',
      
    },
    {
      imagePath: '/13a.jpg',
      text: '',
      
    },
    {
      imagePath: '/14a.jpg',
      text: '',
      
    },
    
    {
      imagePath: '/16a.jpg',
      text: '',
    
    },
    
    {
      imagePath: '/1a.jpg',
      text: '',
      
    },
    
    {
      imagePath: '/2a.jpg',
      text: '',
      
    },
    {
      imagePath: '/10a.jpg',
      text: '',
      
    },
    
    {
      imagePath: '/15.jpeg',
      text: '',
      
    },
    
    
  ];

  const Carousel = ({ items }) => {
    const [currentIndex, setCurrentIndex] = useState(0);
  
    const handlePrev = () => {
      setCurrentIndex((prevIndex) => (prevIndex > 0 ? prevIndex - 1 : items.length - 1));
    };
  
    const handleNext = () => {
      setCurrentIndex((prevIndex) => (prevIndex < items.length - 1 ? prevIndex + 1 : 0));
    };
  
    return (
      <div className="carousel">
        <div className="carousel-content" style={{ transform: `translateX(-${currentIndex * 100}%)` }}>
          {items.map((item, index) => (
            <div key={index} className="carousel-item">
              <img src={item.imagePath} alt={`Image ${index + 1}`} />
              <div className="carousel-footer">
                <p>{item.text}</p>
              </div>
            </div>
          ))}
        </div>
        <button type="button" onClick={handlePrev} className="carousel-button prev">
          &lt;
        </button>
        <button type="button" onClick={handleNext} className="carousel-button next">
          &gt;
        </button>
      </div>
    );
  };

  return (
    <Layout>
      <style jsx>{`
       body {
        margin: 0;
        display: flex;
        align-items: center;
        justify-content: center;
        flex-direction: column;
        height: auto;
      }
      
      .about-container {
        width: 80%;
        margin: 0 auto;
        margin-top: 5vh;
      }
      
      
      .section {
       
        margin-top: 45vh; /* Adjust margin below the header */
      }

      .about-us-section {
       
        margin-top: 45vh; /* Adjust margin below the header */
      }

      .services-part {
            
        margin-top: 35vh; 
       
      }

      .services-section {
       
        margin-top: 35vh; /* Adjust margin below the header */
      }
      
      
      .big-title {
        font-size: 48px;
        text-align: center;
        color: #000;
        margin-bottom: 20px;
      }
      
      .side-title {
        font-size: 18px;
        text-align: center;
        color: #000;
        margin-bottom: 10px;
        cursor: pointer;
        z-index: 2;
      }
      
      .below-title-undertitle {
        font-size: 18px;
        text-align: center;
        color: #333;
        margin-top: 20px; /* Adjust margin above the text */
      }
      
      .below-title-text {
        font-size: 18px;
        text-align: left;
        color: #333;
        margin-top: 30px; /* Adjust margin above the text */
        padding: 20px;
      }

      .conceptos-text {
        
        text-align: center;
        margin-top: -40vh; /* Adjust margin above the text */
        
      }
      
      .tooltip-container {
        position: absolute;
        top: 0; // Adjust as needed
        left: 0; // Adjust as needed
        z-index: 100; // Ensure the tooltip is above other elements
      }

      .carousel-container {
        margin-top: 100vh;
        display: flex;
        flex-direction: column;
        align-items: center;
      }
      
      .services-container {
        display: grid;
        grid-template-columns: repeat(3, 1fr);
        grid-gap: 40px;
        margin-top: 30px; /* Adjusted margin */
        text-align: center;
      }
      
      .service-plan {
        text-align: center;
        padding: 20px;
        border: 1px solid #ddd;
        border-radius: 10px;
        width: 100%;
        text-align: left;
      }
      
      .services-text {
        font-size: 26px;
        margin-top: 20px; /* Adjusted margin */
        text-align: center;
      }
      
      .services-under-text {
        font-size: 12px;
        margin-top: 20px; /* Adjusted margin */
        text-align: center;
      }
      
      
      
      

        @media only screen and (max-width: 600px) {

          body {
            height: 300vh; /* Increase overall height for more space */
          }
        
          
          .section {
          
            margin-top: 45vh; /* Adjust margin below the header */
          }

          .about-us-section {
          
            margin-top: 40vh; /* Adjust margin below the header */
          }

          .services-section {
          
            margin-top: 35vh; /* Adjust margin below the header */
          }
        
          .big-title {
            font-size: 32px;
            margin-bottom: 20px;
          }
        
          .side-title {
            font-size: 16px;
            margin-bottom: 15px;
          }
        
          .below-title-undertitle {
            font-size: 16px;
            margin-top: 30vh;
          }
        
          .below-title-text {
            font-size: 16px;
            margin-top: 5vh;
            padding: 10vh 5vw;
          }

          .services-part {
            
            margin-top: 5vh; 
           
          }
        
          .services-text {
            font-size: 16px;
            margin-top: 1vh; /* Adjusted margin */
            text-align: center;
          }
          
          .services-under-text {
            font-size: 20px;
            position: relative;
            top: 0;
            left: 50%;
            transform: translateX(-50%);
            margin-top: 1vh;
            padding-bottom: 10vh;
          }
        
          .services-under-text {
            font-size: 12px;
            margin-top: 7vh;
            padding-bottom: 10vh;
          }
        
          .services-container {
            grid-template-columns: repeat(1, 1fr);
            grid-gap: 20px;
            margin-top: 10vh;
            padding-bottom: 30vh;
          }
        }
        
        
        


      `}</style>
      <div className="about-container">
  <div className="section">
    <div className="big-title">
      Nuestra vision
    </div>

    <div className="side-title" onClick={handleConocenosClick}>
      Conocenos!
    </div>
  </div>

  <div className="about-us-section">
    <div className="below-title-undertitle">
      SOBRE NOSOTROS
    </div>

    <div className="below-title-text">
      <p>
        JJ Conceptos, es un taller de remodelación e interiorismo basado en Mexico pero que busca siempre tomar en cuenta una visión internacional.
      </p>
      <p>
        Con especialidad en mobiliario a la medida, JJ Conceptos nace como eso, un taller de muebles. En 2021 el arquitecto Juan Pablo Gonzalez y el
        ingeniero Jaime Rodriguez, se unen con un objetivo: Al paso del tiempo, y después de trabajar con diversos clientes, el equipo se amplía y nuestros servicios también, para ofrecer soluciones de interiorismo integral que definimos con los siguientes tres pilares: Arquitectura, Interiorismo y Branding.
      </p>
      <p>
        Nuestro taller mezcla tradición con innovación, para presentar al cliente un producto estético y práctico.
      </p>
      
    </div>
  </div>


  <div className="services-part">
    <div className="services-text">
      <p>
        SERVICIOS
      </p>
    </div>

    <div className="services-under-text">
      <p>
        Por favor coloca el mouse encima del servicio que quieras conocer más a detalle (no todos tienen detalle)
      </p>
    </div>

    <div className="services-container">
      {plans.map((plan, index) => (
        <div key={index} className="service-plan">
          {plan.jsx}
        </div>
      ))}
    </div>
  </div>

  <div className="section">
    {isTooltipVisible && (
      <Tooltip text={tooltipText} isVisible={isTooltipVisible} top={tooltipPosition.top} left={tooltipPosition.left} />
    )}
  </div>


  <div >
  <div className="conceptos-text">
    <p>Conceptos</p>
  </div>
  <label>
    <Carousel items={yourCarouselItems1} />
  </label>
</div>



</div>

    

    </Layout>
  );
};

export default About;







brands.js  big screen

import React, { useState, useEffect } from 'react';
import { useAuth } from '/auth/authContext';
import BrandForm from '/pages/brands/manage/addBrand';
import DelBrandButton from 'pages/brands/manage/delBrand';
import Layout from '/layouts/layout';
import { fetchBrandsData } from '/utils/fetchBrands';




function Brands() {
  const { state } = useAuth();
  const [showBrandForm, setShowBrandForm] = useState(false);
  const [brands, setBrands] = useState([]);
  const [expandedBrand, setExpandedBrand] = useState(null);
  const [selectedBrand, setSelectedBrand] = useState(null);
  const [enlargedView, setEnlargedView] = useState(false);
  const [fullDescriptions, setFullDescriptions] = useState({});

 // Fetch brands when the component mounts
 useEffect(() => {
  const fetchData = async () => {
    try {
      const brandsData = await fetchBrandsData();
      const updatedBrands = brandsData.map((brand) => ({
        ...brand,
        // Limit the description only if the brand is not expanded
        description:
          expandedBrand === null
            ? brand.description.length > 8
              ? brand.description.slice(0, 8) + '...'
              : brand.description
            : brand.description,
      }));
      setBrands(updatedBrands);

      // Store the full descriptions separately
      const fullDescs = brandsData.reduce(
        (acc, brand) => ({
          ...acc,
          [brand.name]: brand.description,
        }),
        {}
      );
      setFullDescriptions(fullDescs);
    } catch (error) {
      console.error('Error fetching brands:', error);
    }
  };

  fetchData();
}, [expandedBrand]);

  const handleBrandAddClick = () => {
    setShowBrandForm(true);
  };

  const handleBrandClick = (brand) => {
    if (brand) {
      setSelectedBrand(brand);
      setEnlargedView(!enlargedView);
      setShowBrandForm(false);
    } else {
      setShowBrandForm((prevShowBrandForm) => !prevShowBrandForm);
    }
  };

  const handleBrandAdded = async () => {
    try {
      const updatedBrands = await fetchBrandsData();
      setBrands(
        updatedBrands.map((brand) => ({
          ...brand,
          description: brand.description.length > 8
            ? brand.description.slice(0, 8) + '...'
            : brand.description,
        }))
      );
      console.log('Updated brands:', updatedBrands);
    } catch (error) {
      console.error('Error handling added brand:', error);
    }
  };

  const handleBrandSubmit = async (brand) => {
    if (brand.name && brand.description) {
      setShowBrandForm(false);
      handleBrandAdded(brand.name);
    } else {
      console.log('Validation failed: Missing name or description');
    }
  };

  const handleDeleteBrand = async (brandName) => {
    try {
      const updatedBrands = brands.filter((brand) => brand.name !== brandName);
      setBrands(updatedBrands);

      if (expandedBrand === brandName) {
        setExpandedBrand(null);
      }
    } catch (error) {
      console.error(error);
    }
  };

  const isButtonVisible = state.clearanceLevel == 1 || state.clearanceLevel == 2;

  

  return (
    <Layout>
      <style jsx >{`
        .no-brands-centered {
          position: fixed;
          top: 50%;
          left: 50%;
          transform: translate(-50%, -50%);
        }

        .add-brands {
          position: absolute;
          top: 14%;
          left: 10%;
          transform: translate(-50%, -50%);
        }

        .pro-grid {
          position: absolute;
          top: 40%;
          left: 0%; /* Adjust as needed to move it to the right */
          display: grid;
          grid-template-columns: repeat(4, 1fr);
          gap: 20px;
          padding:15px;
          border-radius: 10px;
        }
        
        .pro-card {
          border: 1px solid #ddd;
          padding: 10px;
        }

        .enlarged-view {
          position: fixed;
          top: 0;
          left: 0;
          width: 100%;
          height: 100%;
          background-color: rgba(0, 0, 0, 0.94); /* Adjust transparency as needed */
          display: flex;
          z-index: 100; /* Higher z-index than other elements */
        }

        
        .enlarged-container {
          max-width: 80%; /* Adjust as needed */
          max-height: 80vh; /* Adjust as needed */
          overflow: hidden;
        }

        .enlarged-brand {
          width: 100%;
          height: 100%;
          display: flex;
          flex-direction: column;
          align-items: flex-start; /* Align to the left */
          justify-content: center;
        }
        
        .enlarged-brand-img {
          width: 80%; 
          max-width: 100%;
          height: auto;
          max-height: 80vh; 
          object-fit: contain;
          margin-left: 15%;
          margin-top: 10%;
        }

        

        .enlarged-brand-name {
          font-size: 3vw; /* Adjust font size as needed */
          margin-left: 20%; /* Adjust margin-left as needed */
          margin-top: 5%; /* Adjust margin-top as needed */
          color: #f3f0e9;
        }
      
        .enlarged-brand-description {
          font-size: 2vw;
          margin-left: 20%;
          margin-top: 2%;
          color: #f3f0e9;
          white-space: pre-line; /* Preserve newlines and spaces */
          overflow-wrap: break-word; /* Wrap long words */
          max-width: 100%; /* Adjust as needed */
        }
          
        .close-button {
          position: absolute;
          top: 10px;
          right: 10px;
          background: none;
          border: none;
          font-size: 24px;
          cursor: pointer;
          color: white; /* Adjust as needed */
          outline: none;
          transition: color 0.3s ease;
        }
        
        .close-button:hover {
          color: lightgray; /* Adjust hover color as needed */
        }

        @media only screen and (max-width: 600px) {

          .no-brands-centered {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
          }
  
          .add-brands {
            position: absolute;
            top: 14%;
            left: 20%;
            transform: translate(-50%, -50%);
          }
  
          .pro-grid {
            position: absolute;
            top: 40%;
            left: 0%; /* Adjust as needed to move it to the right */
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 20px;
            padding:15px;
            
            
          }
          
          .pro-card {
            border: 1px solid #ddd;
            padding: 10px;
            
          }
  
          .enlarged-view {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.94);
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            z-index: 100;
          }
          
        
          
          .enlarged-brand {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            text-align: center; /* Center text within the container */
          }

          .enlarged-brand-img {
            width: 70%;
            max-width: 100vh;
            height: auto;
            max-height: 70vh;
            object-fit: contain;
            margin: auto; /* Center the image horizontally */
          }
          
          .enlarged-brand-name {
            font-size: 3vw;
            color: #f3f0e9;
            margin-top: 10vh;
          }
          
          .enlarged-brand-description {
            font-size: 2vw;
            color: #f3f0e9;
            white-space: pre-line;
            overflow-wrap: break-word;
            max-width: 100%;
          }
            
          .close-button {
            position: absolute;
            top: 10px;
            right: 10px;
            background: none;
            border: none;
            font-size: 24px;
            cursor: pointer;
            color: white; /* Adjust as needed */
            outline: none;
            transition: color 0.3s ease;
          }
          
          .close-button:hover {
            color: lightgray; /* Adjust hover color as needed */
          }

       
        @media only screen and (min-width: 601px) and (max-width: 768px) {
        
      `}</style>
      <div>
       
       <div className="add-brands">
 {isButtonVisible && (
   <button onClick={handleBrandAddClick}>Add brand</button>
 )}
</div>



       {showBrandForm && (
         <div>
           
           <BrandForm
             onSubmit={handleBrandSubmit}
             brands={brands}
             onBrandAdded={handleBrandAdded}
           />
         </div>
       )}

       <div className="pro-grid">
         {Array.isArray(brands) && brands.length > 0 ? (
           brands.map((brand, index) => (
             <div
               key={index}
               className={`pro-card ${
                 expandedBrand === index ? 'expanded' : ''
               }`}
             >
               <h3
                 onClick={() =>
                   setExpandedBrand(
                     expandedBrand === index ? null : index
                   )
                 }
               >
                 {brand.name}
               </h3>
               <p
                 className={`brand-description ${
                   expandedBrand === index ? 'expanded' : ''
                 }`}
               >
                 {brand.description}
               </p>
               {brand.imageUrl && (
                 <img
                   src={brand.imageUrl}
                   alt={brand.name}
                   className={`brand-image ${
                     expandedBrand === index ? 'expanded' : ''
                   }`}
                   onClick={() => handleBrandClick(brand)}
                 />
               )}
               {isButtonVisible && (
                 <DelBrandButton
                   BrandName={brand.name}
                   onDeleteBrand={handleDeleteBrand}
                 />
               )}
             </div>
           ))
         ) : (
           <div className="no-brands-centered">
             <p
               style={{
                 marginLeft: '10%',
                 zIndex: 1,
               }}
               className={`${Array.isArray(brands) &&
                brands.length === 0
                 ? ''
                 : ''}`}
             >
               No brands to display.
             </p>
           </div>
         )}
       </div>

       {enlargedView && selectedBrand && (
         <div className="enlarged-view">
           <div className="enlarged-container">
             <div className="enlarged-brand">
               <button className="close-button" onClick={() => setEnlargedView(false)}>X</button>
               <img
                 className="enlarged-brand-img"
                 src={selectedBrand.imageUrl}
                 alt={selectedBrand.name}
               />
             </div>
           </div>
           <div className="brand-info">
             <h2 className="enlarged-brand-name">{selectedBrand.name}</h2>
             <p className="enlarged-brand-description">
               {fullDescriptions[selectedBrand.name] || selectedBrand.description}
             </p>
           </div>
         </div>
       )}

     </div>
    </Layout>
  );
}

export default Brands;